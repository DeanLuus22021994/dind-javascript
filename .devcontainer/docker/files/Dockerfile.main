# syntax=docker/dockerfile:1.8
FROM mcr.microsoft.com/devcontainers/base:bullseye AS base

# Build arguments for maximum optimization
ARG BUILDKIT_INLINE_CACHE=1
ARG NODE_VERSION=lts
ARG DEBIAN_FRONTEND=noninteractive
ARG BUILDPLATFORM
ARG TARGETPLATFORM

# Set up environment variables for performance
ENV DEBIAN_FRONTEND=noninteractive \
  TZ=UTC \
  SHELL=/bin/bash \
  NODE_ENV=development \
  DOCKER_BUILDKIT=1 \
  COMPOSE_DOCKER_CLI_BUILD=1 \
  BUILDKIT_PROGRESS=plain \
  BUILDKIT_INLINE_CACHE=1

# Create cache mount points
RUN mkdir -p /cache/{buildkit,docker,npm,yarn,pnpm,apt,pip} \
  && chmod 777 /cache/*

# Install essential packages with aggressive caching
FROM base AS system-deps
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked,id=apt-cache-$TARGETPLATFORM \
  --mount=type=cache,target=/var/lib/apt,sharing=locked,id=apt-lib-$TARGETPLATFORM \
  --mount=type=cache,target=/cache/apt,sharing=locked,id=custom-apt-$TARGETPLATFORM \
  rm -f /etc/apt/apt.conf.d/docker-clean \
  && echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache \
  && apt-get update \
  && apt-get install -y --no-install-recommends \
  ca-certificates \
  curl \
  gnupg \
  lsb-release \
  wget \
  software-properties-common \
  apt-transport-https \
  build-essential \
  python3 \
  python3-pip \
  git \
  vim \
  nano \
  htop \
  jq \
  unzip \
  zip \
  tree \
  net-tools \
  iputils-ping \
  telnet \
  tcpdump \
  strace \
  procps \
  file \
  rsync \
  openssh-client \
  sudo \
  && mkdir -p /etc/apt/keyrings

# Install Docker CLI with aggressive caching
FROM system-deps AS docker-install
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked,id=apt-cache-docker-$TARGETPLATFORM \
  --mount=type=cache,target=/var/lib/apt,sharing=locked,id=apt-lib-docker-$TARGETPLATFORM \
  --mount=type=cache,target=/cache/docker-keys,sharing=locked,id=docker-keys-$TARGETPLATFORM \
  if [ ! -f /cache/docker-keys/docker.gpg ]; then \
  curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /cache/docker-keys/docker.gpg; \
  fi \
  && cp /cache/docker-keys/docker.gpg /etc/apt/keyrings/docker.gpg \
  && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null \
  && apt-get update \
  && apt-get install -y --no-install-recommends \
  docker-ce-cli \
  docker-buildx-plugin \
  docker-compose-plugin

# Install Node.js with caching
FROM docker-install AS node-install
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked,id=apt-cache-node-$TARGETPLATFORM \
  --mount=type=cache,target=/cache/nodejs,sharing=locked,id=nodejs-$TARGETPLATFORM \
  if [ ! -f /cache/nodejs/setup_done ]; then \
  curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION}.x | bash - \
  && touch /cache/nodejs/setup_done; \
  fi \
  && apt-get install -y --no-install-recommends nodejs

# Install global Node.js tools with aggressive npm caching
FROM node-install AS npm-global
RUN --mount=type=cache,target=/root/.npm,sharing=locked,id=npm-root-$TARGETPLATFORM \
  --mount=type=cache,target=/cache/npm,sharing=locked,id=npm-global-$TARGETPLATFORM \
  npm config set cache /cache/npm \
  && npm install -g --cache /cache/npm --prefer-offline \
  npm@latest \
  yarn \
  pnpm \
  typescript \
  ts-node \
  nodemon \
  pm2 \
  eslint \
  prettier \
  @angular/cli \
  @vue/cli \
  create-react-app \
  nx \
  lerna \
  serverless \
  firebase-tools \
  @nestjs/cli \
  @storybook/cli \
  localtunnel \
  ngrok \
  autocannon \
  clinic \
  0x

# Install development tools with caching
FROM npm-global AS dev-tools
RUN --mount=type=cache,target=/cache/tools,sharing=locked,id=dev-tools-$TARGETPLATFORM \
  --mount=type=cache,target=/tmp/downloads,sharing=locked,id=downloads-$TARGETPLATFORM \
  # Docker Compose
  if [ ! -f /cache/tools/docker-compose ]; then \
  curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /cache/tools/docker-compose; \
  fi \
  && cp /cache/tools/docker-compose /usr/local/bin/docker-compose \
  && chmod +x /usr/local/bin/docker-compose \
  # ctop
  && if [ ! -f /cache/tools/ctop ]; then \
  CTOP_VERSION=$(curl -s https://api.github.com/repos/bcicen/ctop/releases/latest | jq -r .tag_name) \
  && wget -O /cache/tools/ctop "https://github.com/bcicen/ctop/releases/download/${CTOP_VERSION}/ctop-${CTOP_VERSION#v}-linux-amd64"; \
  fi \
  && cp /cache/tools/ctop /usr/local/bin/ctop \
  && chmod +x /usr/local/bin/ctop \
  # lazydocker
  && if [ ! -f /cache/tools/lazydocker ]; then \
  curl -s https://api.github.com/repos/jesseduffield/lazydocker/releases/latest \
  | grep "browser_download_url.*Linux_x86_64.tar.gz" \
  | cut -d : -f 2,3 \
  | tr -d \" \
  | wget -qi - -O /tmp/downloads/lazydocker.tar.gz \
  && tar xzf /tmp/downloads/lazydocker.tar.gz -C /tmp/downloads \
  && cp /tmp/downloads/lazydocker /cache/tools/lazydocker; \
  fi \
  && cp /cache/tools/lazydocker /usr/local/bin/lazydocker \
  && chmod +x /usr/local/bin/lazydocker \
  # yq
  && if [ ! -f /cache/tools/yq ]; then \
  wget -qO /cache/tools/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64; \
  fi \
  && cp /cache/tools/yq /usr/local/bin/yq \
  && chmod +x /usr/local/bin/yq

# Final optimized stage
FROM dev-tools AS final

# Configure buildkit for maximum performance
ENV BUILDKIT_HOST=docker-container://buildkit \
  BUILDKIT_INLINE_CACHE=1 \
  DOCKER_BUILDKIT=1

# Create optimized cache structure
RUN mkdir -p /home/vscode/{.cache,.local/share,.config} \
  && mkdir -p /cache/{buildkit,docker,npm,yarn,pnpm,vscode} \
  && chown -R vscode:vscode /home/vscode /cache

# Performance-optimized shell configuration
RUN echo '# Performance aliases' >> /home/vscode/.bashrc \
  && echo 'alias ll="ls -alF"' >> /home/vscode/.bashrc \
  && echo 'alias la="ls -A"' >> /home/vscode/.bashrc \
  && echo 'alias l="ls -CF"' >> /home/vscode/.bashrc \
  && echo 'alias dps="docker ps --format \"table {{.Names}}\t{{.Status}}\t{{.Ports}}\""' >> /home/vscode/.bashrc \
  && echo 'alias dimg="docker images --format \"table {{.Repository}}\t{{.Tag}}\t{{.Size}}\""' >> /home/vscode/.bashrc \
  && echo 'alias dlog="docker logs -f"' >> /home/vscode/.bashrc \
  && echo 'alias dexec="docker exec -it"' >> /home/vscode/.bashrc \
  && echo 'alias dcup="docker-compose up -d"' >> /home/vscode/.bashrc \
  && echo 'alias dcdown="docker-compose down"' >> /home/vscode/.bashrc \
  && echo '# Cache optimization' >> /home/vscode/.bashrc \
  && echo 'export NPM_CONFIG_CACHE="/cache/npm"' >> /home/vscode/.bashrc \
  && echo 'export YARN_CACHE_FOLDER="/cache/yarn"' >> /home/vscode/.bashrc \
  && echo 'export PNPM_HOME="/cache/pnpm"' >> /home/vscode/.bashrc \
  && echo 'export DOCKER_BUILDKIT=1' >> /home/vscode/.bashrc \
  && echo 'export BUILDKIT_INLINE_CACHE=1' >> /home/vscode/.bashrc

# Git performance optimization
RUN git config --global --add safe.directory '*' \
  && git config --global init.defaultBranch main \
  && git config --global pull.rebase false \
  && git config --global core.preloadindex true \
  && git config --global core.fscache true \
  && git config --global gc.auto 256

# Switch to vscode user for final configuration
USER vscode

# Configure package managers for maximum caching
RUN npm config set cache /cache/npm \
  && npm config set prefer-offline true \
  && npm config set prefer-dedupe true \
  && yarn config set cache-folder /cache/yarn \
  && yarn config set prefer-offline true

USER root

# Optimized health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD docker version >/dev/null 2>&1 || exit 1

# Final cleanup with cache preservation
RUN apt-get autoremove -y \
  && find /var/log -type f -delete \
  && find /tmp -type f -delete \
  && find /var/tmp -type f -delete
